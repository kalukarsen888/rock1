#r "nuget: FunSharp.Ru"
#r "nuget: FSharp.Core.Russian, 0.0.6"
open Библиотека
open Фшарп.Ядро
open Библиотека.Цвета
ГрафическоеОкно.ЦветПера <-Цвета.Красный
ГрафическоеОкно.ЦветКисти <-Цвета.Зеленый
ГрафическоеОкно.ЦветФона <-Цвета.Синий
type Игрок = 
    {
        mutable х:int 
        mutable у:int
        спрайт:string
        mutable поворот:int
    }
let на_64 = 64
let папка_с_тайлами = "C:\\unity\\rock1\\"
let  уровень_1 = 
    [
    "ssssss"
    "s    s"
    "sjssss"
    "s s"
    "s*s"
    "sss"
    ]
let уровень_2 = 
    [
    "ssssss"
    "s    s"
    "s  j*s"
    "s *j s"
    "ssssss"



    ]
let уровень_3 = 
    [
    "sssss"
    "s   ss"
    "s*jl s"
    "s  s s"
    "s    s"
    "ssssss"
    ]
let уровень_4 = 
    [
    "ssssss"
    "s    ss"
    "s jj  s"
    "s s* *s"
    "s     s"
    "sssssss"
    ]
let mutable текуший_уровень = 
    уровень_1
let создать_спрайт к = 
    if к = 's' then Фигуры.ДобавитьИзображение (папка_с_тайлами + "кирпичная_стена.png")
    elif к = ' ' then Фигуры.ДобавитьИзображение (папка_с_тайлами + "пол.png")
    elif к = '*' then Фигуры.ДобавитьИзображение(папка_с_тайлами + "выход.png")
    elif к = 'j' then Фигуры.ДобавитьИзображение (папка_с_тайлами + "ящик.png" ) 
    else
    ""
let mutable спрайты_фона = []
let mutable ящики = []
let нарисовать_карту (уровень:string list) =
    let mutable ряд = 0
    for ряд_уровня in уровень do 
        let mutable столбец = 0
        for тайл_код in ряд_уровня do 
            let спрайт = 
                if тайл_код = 'j' then   
                    создать_спрайт ' '
                elif тайл_код = 'l' then   
                    создать_спрайт '*'
                else
                    создать_спрайт тайл_код

            спрайты_фона <- спрайты_фона @ [спрайт] 
            Фигуры.Переместить (спрайт,столбец*64,ряд*64)
            столбец <- столбец + 1
        ряд <- ряд + 1 

let нарисовать_ящики (уровень:string list) =
    let mutable ряд = 0
    ящики <- []
    for ряд_уровня in уровень do 
        let mutable столбец = 0
        for тайл_код in ряд_уровня do 
            if тайл_код = 'j' || тайл_код = 'l' then  
                let спрайт =
                    создать_спрайт 'j'
                let ящик = 
                    {
                        х = столбец
                        у = ряд
                        спрайт = спрайт
                        поворот = 0
                    } 
                ящики <- ящики @ [ящик]
                спрайты_фона <- спрайты_фона @ [спрайт] 
                Фигуры.Переместить (спрайт,столбец*64,ряд*64)
            столбец <- столбец + 1
        ряд <- ряд + 1 
нарисовать_карту текуший_уровень
нарисовать_ящики текуший_уровень
// let ящик = Фигуры.ДобавитьИзображение (папка_с_тайлами + "ящик.png")
// Фигуры.Переместить (ящик,2 * на_64,1 * на_64)
let создать_игрока (х,у) = 
    let игрок =
        {
        х = х 
        у = у 
        спрайт = Фигуры.ДобавитьИзображение (папка_с_тайлами + "человечек.png")
        поворот = 0
        
        }
    Фигуры.Переместить (игрок.спрайт,игрок.х * на_64,игрок.у * на_64)
    игрок
let mutable номер_уровня = 0
let стартовые_координаты_игрока  = 
    [
    (3,1);
    (1,1);
    (1,1);
    (1,1);
    ]
let уровни = [уровень_1;уровень_2;уровень_3;уровень_4]    
let mutable игрок: Игрок = 
    создать_игрока(стартовые_координаты_игрока[номер_уровня])
let очистить_карту  () = 
    спрайты_фона |> Посл.итер Фигуры.Удалить
    Фигуры.Удалить (игрок.спрайт)
let можно_стоять(уровень: string list, х,у) =
    // if 's'  =
    if уровень[у][х] = 's' then 
        false
    else
        true
let ящик_стоит_на_позиции (уровень:string list, х, у) = 
    if уровень[у][х] = '*' || уровень[у][х] = 'l' then 
        true
    else
        false

let есть_ящик х у =
    let кандидаты_ящики = ящики |> Список.фильтр (fun ящик -> ящик.х = х && ящик.у = у)
    кандидаты_ящики.Length = 1

let попробовать_переместить непись (направление: int) =
    let mutable результат = непись
    if направление = 1 then
        if можно_стоять(текуший_уровень, непись.х - 1, непись.у) then
            if есть_ящик (непись.х - 1) непись.у then 
                if есть_ящик (непись.х - 2) непись.у then
                    ()
                elif не (можно_стоять (текуший_уровень, непись.х - 2, непись.у)) then
                    ()
                else
                    результат <- { непись with х = непись.х - 1 }
            else
                результат <- { непись with х = непись.х - 1 }
        
            
    if направление = 0 then
        if можно_стоять(текуший_уровень, непись.х + 1, непись.у) then
            if есть_ящик (непись.х + 1) непись.у then 
                if есть_ящик (непись.х + 2) непись.у then
                    ()
                elif не (можно_стоять (текуший_уровень, непись.х + 2, непись.у)) then
                    ()
                else
                    результат <- { непись with х = непись.х + 1 }
            else
                результат <- { непись with х = непись.х + 1 }
    if направление = 2 then
        if можно_стоять(текуший_уровень, непись.х , непись.у - 1) then
            if есть_ящик непись.х  (непись.у - 1) then 
                if есть_ящик непись.х  (непись.у - 2 )then
                    ()
                elif не (можно_стоять (текуший_уровень, непись.х , непись.у - 2)) then
                    ()
                else
                    результат <- { непись with у = непись.у - 1 }
            else
                результат <- { непись with у = непись.у - 1 }
    if направление = 3 then
        if можно_стоять(текуший_уровень, непись.х , непись.у + 1) then
            if есть_ящик непись.х  (непись.у + 1) then 
                if есть_ящик непись.х  (непись.у + 2 )then
                    ()
                elif не (можно_стоять (текуший_уровень, непись.х , непись.у + 2)) then
                    ()
                else
                    результат <- { непись with у = непись.у + 1 }
            else
                результат <- { непись with у = непись.у + 1 }
    
    //результат.поворот направление
    результат
let cледующий_уровень () =
    уровни[номер_уровня]
let сыграть_текущий_уровень() = 
    текуший_уровень <- cледующий_уровень ()
    нарисовать_карту текуший_уровень
    нарисовать_ящики текуший_уровень
    игрок <- создать_игрока стартовые_координаты_игрока[номер_уровня]
let обработка () =
    let mutable направление = -1
    if ГрафическоеОкно.ПоследняяКнопка ="A" then
        направление <- 1

    if ГрафическоеОкно.ПоследняяКнопка = "D" then
        направление <- 0

    if ГрафическоеОкно.ПоследняяКнопка = "W" then
        направление <- 2

    if ГрафическоеОкно.ПоследняяКнопка = "S" then
        направление <- 3
    if ГрафическоеОкно.ПоследняяКнопка = "R" then 
        очистить_карту ()
        сыграть_текущий_уровень()
    if направление <> -1 then 
        игрок <- попробовать_переместить игрок направление
        Фигуры.Переместить (игрок.спрайт,игрок.х * на_64,игрок.у * на_64)
    напечататьфн "%d %d" игрок.х игрок.у
    // ящики |> Посл.фильтр (fun ящик -> ящик.х = игрок.х  && ящик.у = игрок.у,(напечатьфн "я на ящике"))
    // let кандидаты_ящики = ящики |> Посл.фильтр (fun ящик -> ящик.х = игрок.х  && ящик.у = игрок.у)л
    if есть_ящик игрок.х игрок.у then
        ящики <- ящики |> Список.отобразить (fun ящик -> 
            if ящик.х = игрок.х && ящик.у = игрок.у then 
                let новый_ящик = попробовать_переместить ящик направление
                //Фигуры.Удалить (ящик.спрайт)
                Фигуры.Переместить (новый_ящик.спрайт,новый_ящик.х * на_64,новый_ящик.у * на_64)
                новый_ящик
            else
                ящик )
    //игрок <- попробовать_переместить игрок направление
//напечататьфн "%A"  ([1;2;3;4] |> Список.отобразить (fun э -> э * 3))
    ящики |> Список.итер (fun ящик -> напечататьфн "%A" (ящик_стоит_на_позиции (текуший_уровень,ящик.х,ящик.у)))


ГрафическоеОкно.КнопкаНажата <- обработка
while (true) do
    let игрок_прошел_уровень = ящики |> Список.длявсех (fun ящик -> ящик_стоит_на_позиции (текуший_уровень,ящик.х,ящик.у))
    if игрок_прошел_уровень then
        номер_уровня <- номер_уровня + 1 
        ГрафическоеОкно.РазмерШрифта <- 90
        очистить_карту ()
        if номер_уровня = уровни.Length then
            let фон =  Фигуры.ДобавитьИзображение "C:\\unity\\rock1\\wpapers_ru_Космос.jpg" 
            let выиграл =Фигуры.ДобавитьТекст "Выиграл"
            Фигуры.Переместить (выиграл,232,205)
            Программа.Задержка 5000
            Программа.Закончить()
        
        сыграть_текущий_уровень()
        Программа.Задержка 5000
      
    Программа.Задержка 100
        
    